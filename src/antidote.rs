// This file is generated by rust-protobuf 2.1.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct ApbErrorResp {
    // message fields
    errmsg: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    errcode: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbErrorResp {
    pub fn new() -> ApbErrorResp {
        ::std::default::Default::default()
    }

    // required bytes errmsg = 1;

    pub fn clear_errmsg(&mut self) {
        self.errmsg.clear();
    }

    pub fn has_errmsg(&self) -> bool {
        self.errmsg.is_some()
    }

    // Param is passed by value, moved
    pub fn set_errmsg(&mut self, v: ::std::vec::Vec<u8>) {
        self.errmsg = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_errmsg(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.errmsg.is_none() {
            self.errmsg.set_default();
        }
        self.errmsg.as_mut().unwrap()
    }

    // Take field
    pub fn take_errmsg(&mut self) -> ::std::vec::Vec<u8> {
        self.errmsg.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_errmsg(&self) -> &[u8] {
        match self.errmsg.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // required uint32 errcode = 2;

    pub fn clear_errcode(&mut self) {
        self.errcode = ::std::option::Option::None;
    }

    pub fn has_errcode(&self) -> bool {
        self.errcode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_errcode(&mut self, v: u32) {
        self.errcode = ::std::option::Option::Some(v);
    }

    pub fn get_errcode(&self) -> u32 {
        self.errcode.unwrap_or(0)
    }
}

impl ::protobuf::Message for ApbErrorResp {
    fn is_initialized(&self) -> bool {
        if self.errmsg.is_none() {
            return false;
        }
        if self.errcode.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.errmsg)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.errcode = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.errmsg.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.errcode {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.errmsg.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(v) = self.errcode {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbErrorResp {
        ApbErrorResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "errmsg",
                    |m: &ApbErrorResp| { &m.errmsg },
                    |m: &mut ApbErrorResp| { &mut m.errmsg },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "errcode",
                    |m: &ApbErrorResp| { &m.errcode },
                    |m: &mut ApbErrorResp| { &mut m.errcode },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbErrorResp>(
                    "ApbErrorResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbErrorResp {
        static mut instance: ::protobuf::lazy::Lazy<ApbErrorResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbErrorResp,
        };
        unsafe {
            instance.get(ApbErrorResp::new)
        }
    }
}

impl ::protobuf::Clear for ApbErrorResp {
    fn clear(&mut self) {
        self.clear_errmsg();
        self.clear_errcode();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbErrorResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbErrorResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbCounterUpdate {
    // message fields
    inc: ::std::option::Option<i64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbCounterUpdate {
    pub fn new() -> ApbCounterUpdate {
        ::std::default::Default::default()
    }

    // optional sint64 inc = 1;

    pub fn clear_inc(&mut self) {
        self.inc = ::std::option::Option::None;
    }

    pub fn has_inc(&self) -> bool {
        self.inc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_inc(&mut self, v: i64) {
        self.inc = ::std::option::Option::Some(v);
    }

    pub fn get_inc(&self) -> i64 {
        self.inc.unwrap_or(0)
    }
}

impl ::protobuf::Message for ApbCounterUpdate {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.inc = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.inc {
            my_size += ::protobuf::rt::value_varint_zigzag_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.inc {
            os.write_sint64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbCounterUpdate {
        ApbCounterUpdate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                    "inc",
                    |m: &ApbCounterUpdate| { &m.inc },
                    |m: &mut ApbCounterUpdate| { &mut m.inc },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbCounterUpdate>(
                    "ApbCounterUpdate",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbCounterUpdate {
        static mut instance: ::protobuf::lazy::Lazy<ApbCounterUpdate> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbCounterUpdate,
        };
        unsafe {
            instance.get(ApbCounterUpdate::new)
        }
    }
}

impl ::protobuf::Clear for ApbCounterUpdate {
    fn clear(&mut self) {
        self.clear_inc();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbCounterUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbCounterUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbGetCounterResp {
    // message fields
    value: ::std::option::Option<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbGetCounterResp {
    pub fn new() -> ApbGetCounterResp {
        ::std::default::Default::default()
    }

    // required sint32 value = 1;

    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: i32) {
        self.value = ::std::option::Option::Some(v);
    }

    pub fn get_value(&self) -> i32 {
        self.value.unwrap_or(0)
    }
}

impl ::protobuf::Message for ApbGetCounterResp {
    fn is_initialized(&self) -> bool {
        if self.value.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.value = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.value {
            my_size += ::protobuf::rt::value_varint_zigzag_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.value {
            os.write_sint32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbGetCounterResp {
        ApbGetCounterResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                    "value",
                    |m: &ApbGetCounterResp| { &m.value },
                    |m: &mut ApbGetCounterResp| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbGetCounterResp>(
                    "ApbGetCounterResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbGetCounterResp {
        static mut instance: ::protobuf::lazy::Lazy<ApbGetCounterResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbGetCounterResp,
        };
        unsafe {
            instance.get(ApbGetCounterResp::new)
        }
    }
}

impl ::protobuf::Clear for ApbGetCounterResp {
    fn clear(&mut self) {
        self.clear_value();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbGetCounterResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbGetCounterResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbSetUpdate {
    // message fields
    optype: ::std::option::Option<ApbSetUpdate_SetOpType>,
    adds: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    rems: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbSetUpdate {
    pub fn new() -> ApbSetUpdate {
        ::std::default::Default::default()
    }

    // required .AntidotePB.ApbSetUpdate.SetOpType optype = 1;

    pub fn clear_optype(&mut self) {
        self.optype = ::std::option::Option::None;
    }

    pub fn has_optype(&self) -> bool {
        self.optype.is_some()
    }

    // Param is passed by value, moved
    pub fn set_optype(&mut self, v: ApbSetUpdate_SetOpType) {
        self.optype = ::std::option::Option::Some(v);
    }

    pub fn get_optype(&self) -> ApbSetUpdate_SetOpType {
        self.optype.unwrap_or(ApbSetUpdate_SetOpType::ADD)
    }

    // repeated bytes adds = 2;

    pub fn clear_adds(&mut self) {
        self.adds.clear();
    }

    // Param is passed by value, moved
    pub fn set_adds(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.adds = v;
    }

    // Mutable pointer to the field.
    pub fn mut_adds(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.adds
    }

    // Take field
    pub fn take_adds(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.adds, ::protobuf::RepeatedField::new())
    }

    pub fn get_adds(&self) -> &[::std::vec::Vec<u8>] {
        &self.adds
    }

    // repeated bytes rems = 3;

    pub fn clear_rems(&mut self) {
        self.rems.clear();
    }

    // Param is passed by value, moved
    pub fn set_rems(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.rems = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rems(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.rems
    }

    // Take field
    pub fn take_rems(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.rems, ::protobuf::RepeatedField::new())
    }

    pub fn get_rems(&self) -> &[::std::vec::Vec<u8>] {
        &self.rems
    }
}

impl ::protobuf::Message for ApbSetUpdate {
    fn is_initialized(&self) -> bool {
        if self.optype.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.optype, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.adds)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.rems)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.optype {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        for value in &self.adds {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        for value in &self.rems {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.optype {
            os.write_enum(1, v.value())?;
        }
        for v in &self.adds {
            os.write_bytes(2, &v)?;
        };
        for v in &self.rems {
            os.write_bytes(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbSetUpdate {
        ApbSetUpdate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ApbSetUpdate_SetOpType>>(
                    "optype",
                    |m: &ApbSetUpdate| { &m.optype },
                    |m: &mut ApbSetUpdate| { &mut m.optype },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "adds",
                    |m: &ApbSetUpdate| { &m.adds },
                    |m: &mut ApbSetUpdate| { &mut m.adds },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "rems",
                    |m: &ApbSetUpdate| { &m.rems },
                    |m: &mut ApbSetUpdate| { &mut m.rems },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbSetUpdate>(
                    "ApbSetUpdate",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbSetUpdate {
        static mut instance: ::protobuf::lazy::Lazy<ApbSetUpdate> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbSetUpdate,
        };
        unsafe {
            instance.get(ApbSetUpdate::new)
        }
    }
}

impl ::protobuf::Clear for ApbSetUpdate {
    fn clear(&mut self) {
        self.clear_optype();
        self.clear_adds();
        self.clear_rems();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbSetUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbSetUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ApbSetUpdate_SetOpType {
    ADD = 1,
    REMOVE = 2,
}

impl ::protobuf::ProtobufEnum for ApbSetUpdate_SetOpType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ApbSetUpdate_SetOpType> {
        match value {
            1 => ::std::option::Option::Some(ApbSetUpdate_SetOpType::ADD),
            2 => ::std::option::Option::Some(ApbSetUpdate_SetOpType::REMOVE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ApbSetUpdate_SetOpType] = &[
            ApbSetUpdate_SetOpType::ADD,
            ApbSetUpdate_SetOpType::REMOVE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ApbSetUpdate_SetOpType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ApbSetUpdate_SetOpType {
}

impl ::protobuf::reflect::ProtobufValue for ApbSetUpdate_SetOpType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbGetSetResp {
    // message fields
    value: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbGetSetResp {
    pub fn new() -> ApbGetSetResp {
        ::std::default::Default::default()
    }

    // repeated bytes value = 1;

    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    pub fn mut_value(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.value, ::protobuf::RepeatedField::new())
    }

    pub fn get_value(&self) -> &[::std::vec::Vec<u8>] {
        &self.value
    }
}

impl ::protobuf::Message for ApbGetSetResp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.value {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.value {
            os.write_bytes(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbGetSetResp {
        ApbGetSetResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "value",
                    |m: &ApbGetSetResp| { &m.value },
                    |m: &mut ApbGetSetResp| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbGetSetResp>(
                    "ApbGetSetResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbGetSetResp {
        static mut instance: ::protobuf::lazy::Lazy<ApbGetSetResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbGetSetResp,
        };
        unsafe {
            instance.get(ApbGetSetResp::new)
        }
    }
}

impl ::protobuf::Clear for ApbGetSetResp {
    fn clear(&mut self) {
        self.clear_value();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbGetSetResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbGetSetResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbRegUpdate {
    // message fields
    value: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbRegUpdate {
    pub fn new() -> ApbRegUpdate {
        ::std::default::Default::default()
    }

    // required bytes value = 1;

    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        self.value.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_value(&self) -> &[u8] {
        match self.value.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
}

impl ::protobuf::Message for ApbRegUpdate {
    fn is_initialized(&self) -> bool {
        if self.value.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.value.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.value.as_ref() {
            os.write_bytes(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbRegUpdate {
        ApbRegUpdate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "value",
                    |m: &ApbRegUpdate| { &m.value },
                    |m: &mut ApbRegUpdate| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbRegUpdate>(
                    "ApbRegUpdate",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbRegUpdate {
        static mut instance: ::protobuf::lazy::Lazy<ApbRegUpdate> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbRegUpdate,
        };
        unsafe {
            instance.get(ApbRegUpdate::new)
        }
    }
}

impl ::protobuf::Clear for ApbRegUpdate {
    fn clear(&mut self) {
        self.clear_value();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbRegUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbRegUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbGetRegResp {
    // message fields
    value: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbGetRegResp {
    pub fn new() -> ApbGetRegResp {
        ::std::default::Default::default()
    }

    // required bytes value = 1;

    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        self.value.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_value(&self) -> &[u8] {
        match self.value.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
}

impl ::protobuf::Message for ApbGetRegResp {
    fn is_initialized(&self) -> bool {
        if self.value.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.value.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.value.as_ref() {
            os.write_bytes(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbGetRegResp {
        ApbGetRegResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "value",
                    |m: &ApbGetRegResp| { &m.value },
                    |m: &mut ApbGetRegResp| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbGetRegResp>(
                    "ApbGetRegResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbGetRegResp {
        static mut instance: ::protobuf::lazy::Lazy<ApbGetRegResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbGetRegResp,
        };
        unsafe {
            instance.get(ApbGetRegResp::new)
        }
    }
}

impl ::protobuf::Clear for ApbGetRegResp {
    fn clear(&mut self) {
        self.clear_value();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbGetRegResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbGetRegResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbGetMVRegResp {
    // message fields
    values: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbGetMVRegResp {
    pub fn new() -> ApbGetMVRegResp {
        ::std::default::Default::default()
    }

    // repeated bytes values = 1;

    pub fn clear_values(&mut self) {
        self.values.clear();
    }

    // Param is passed by value, moved
    pub fn set_values(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_values(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.values
    }

    // Take field
    pub fn take_values(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.values, ::protobuf::RepeatedField::new())
    }

    pub fn get_values(&self) -> &[::std::vec::Vec<u8>] {
        &self.values
    }
}

impl ::protobuf::Message for ApbGetMVRegResp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.values)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.values {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.values {
            os.write_bytes(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbGetMVRegResp {
        ApbGetMVRegResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "values",
                    |m: &ApbGetMVRegResp| { &m.values },
                    |m: &mut ApbGetMVRegResp| { &mut m.values },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbGetMVRegResp>(
                    "ApbGetMVRegResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbGetMVRegResp {
        static mut instance: ::protobuf::lazy::Lazy<ApbGetMVRegResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbGetMVRegResp,
        };
        unsafe {
            instance.get(ApbGetMVRegResp::new)
        }
    }
}

impl ::protobuf::Clear for ApbGetMVRegResp {
    fn clear(&mut self) {
        self.clear_values();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbGetMVRegResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbGetMVRegResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbMapKey {
    // message fields
    key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    field_type: ::std::option::Option<CRDT_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbMapKey {
    pub fn new() -> ApbMapKey {
        ::std::default::Default::default()
    }

    // required bytes key = 1;

    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.key.is_none() {
            self.key.set_default();
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::vec::Vec<u8> {
        self.key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_key(&self) -> &[u8] {
        match self.key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // required .AntidotePB.CRDT_type type = 2;

    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: CRDT_type) {
        self.field_type = ::std::option::Option::Some(v);
    }

    pub fn get_field_type(&self) -> CRDT_type {
        self.field_type.unwrap_or(CRDT_type::COUNTER)
    }
}

impl ::protobuf::Message for ApbMapKey {
    fn is_initialized(&self) -> bool {
        if self.key.is_none() {
            return false;
        }
        if self.field_type.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.key.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(v) = self.field_type {
            os.write_enum(2, v.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbMapKey {
        ApbMapKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "key",
                    |m: &ApbMapKey| { &m.key },
                    |m: &mut ApbMapKey| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CRDT_type>>(
                    "type",
                    |m: &ApbMapKey| { &m.field_type },
                    |m: &mut ApbMapKey| { &mut m.field_type },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbMapKey>(
                    "ApbMapKey",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbMapKey {
        static mut instance: ::protobuf::lazy::Lazy<ApbMapKey> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbMapKey,
        };
        unsafe {
            instance.get(ApbMapKey::new)
        }
    }
}

impl ::protobuf::Clear for ApbMapKey {
    fn clear(&mut self) {
        self.clear_key();
        self.clear_field_type();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbMapKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbMapKey {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbMapUpdate {
    // message fields
    updates: ::protobuf::RepeatedField<ApbMapNestedUpdate>,
    removedKeys: ::protobuf::RepeatedField<ApbMapKey>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbMapUpdate {
    pub fn new() -> ApbMapUpdate {
        ::std::default::Default::default()
    }

    // repeated .AntidotePB.ApbMapNestedUpdate updates = 1;

    pub fn clear_updates(&mut self) {
        self.updates.clear();
    }

    // Param is passed by value, moved
    pub fn set_updates(&mut self, v: ::protobuf::RepeatedField<ApbMapNestedUpdate>) {
        self.updates = v;
    }

    // Mutable pointer to the field.
    pub fn mut_updates(&mut self) -> &mut ::protobuf::RepeatedField<ApbMapNestedUpdate> {
        &mut self.updates
    }

    // Take field
    pub fn take_updates(&mut self) -> ::protobuf::RepeatedField<ApbMapNestedUpdate> {
        ::std::mem::replace(&mut self.updates, ::protobuf::RepeatedField::new())
    }

    pub fn get_updates(&self) -> &[ApbMapNestedUpdate] {
        &self.updates
    }

    // repeated .AntidotePB.ApbMapKey removedKeys = 2;

    pub fn clear_removedKeys(&mut self) {
        self.removedKeys.clear();
    }

    // Param is passed by value, moved
    pub fn set_removedKeys(&mut self, v: ::protobuf::RepeatedField<ApbMapKey>) {
        self.removedKeys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_removedKeys(&mut self) -> &mut ::protobuf::RepeatedField<ApbMapKey> {
        &mut self.removedKeys
    }

    // Take field
    pub fn take_removedKeys(&mut self) -> ::protobuf::RepeatedField<ApbMapKey> {
        ::std::mem::replace(&mut self.removedKeys, ::protobuf::RepeatedField::new())
    }

    pub fn get_removedKeys(&self) -> &[ApbMapKey] {
        &self.removedKeys
    }
}

impl ::protobuf::Message for ApbMapUpdate {
    fn is_initialized(&self) -> bool {
        for v in &self.updates {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.removedKeys {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.updates)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.removedKeys)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.updates {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.removedKeys {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.updates {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.removedKeys {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbMapUpdate {
        ApbMapUpdate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbMapNestedUpdate>>(
                    "updates",
                    |m: &ApbMapUpdate| { &m.updates },
                    |m: &mut ApbMapUpdate| { &mut m.updates },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbMapKey>>(
                    "removedKeys",
                    |m: &ApbMapUpdate| { &m.removedKeys },
                    |m: &mut ApbMapUpdate| { &mut m.removedKeys },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbMapUpdate>(
                    "ApbMapUpdate",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbMapUpdate {
        static mut instance: ::protobuf::lazy::Lazy<ApbMapUpdate> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbMapUpdate,
        };
        unsafe {
            instance.get(ApbMapUpdate::new)
        }
    }
}

impl ::protobuf::Clear for ApbMapUpdate {
    fn clear(&mut self) {
        self.clear_updates();
        self.clear_removedKeys();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbMapUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbMapUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbMapNestedUpdate {
    // message fields
    key: ::protobuf::SingularPtrField<ApbMapKey>,
    update: ::protobuf::SingularPtrField<ApbUpdateOperation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbMapNestedUpdate {
    pub fn new() -> ApbMapNestedUpdate {
        ::std::default::Default::default()
    }

    // required .AntidotePB.ApbMapKey key = 1;

    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ApbMapKey) {
        self.key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ApbMapKey {
        if self.key.is_none() {
            self.key.set_default();
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ApbMapKey {
        self.key.take().unwrap_or_else(|| ApbMapKey::new())
    }

    pub fn get_key(&self) -> &ApbMapKey {
        self.key.as_ref().unwrap_or_else(|| ApbMapKey::default_instance())
    }

    // required .AntidotePB.ApbUpdateOperation update = 2;

    pub fn clear_update(&mut self) {
        self.update.clear();
    }

    pub fn has_update(&self) -> bool {
        self.update.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update(&mut self, v: ApbUpdateOperation) {
        self.update = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update(&mut self) -> &mut ApbUpdateOperation {
        if self.update.is_none() {
            self.update.set_default();
        }
        self.update.as_mut().unwrap()
    }

    // Take field
    pub fn take_update(&mut self) -> ApbUpdateOperation {
        self.update.take().unwrap_or_else(|| ApbUpdateOperation::new())
    }

    pub fn get_update(&self) -> &ApbUpdateOperation {
        self.update.as_ref().unwrap_or_else(|| ApbUpdateOperation::default_instance())
    }
}

impl ::protobuf::Message for ApbMapNestedUpdate {
    fn is_initialized(&self) -> bool {
        if self.key.is_none() {
            return false;
        }
        if self.update.is_none() {
            return false;
        }
        for v in &self.key {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.update {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.update.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.key.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.update.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbMapNestedUpdate {
        ApbMapNestedUpdate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbMapKey>>(
                    "key",
                    |m: &ApbMapNestedUpdate| { &m.key },
                    |m: &mut ApbMapNestedUpdate| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbUpdateOperation>>(
                    "update",
                    |m: &ApbMapNestedUpdate| { &m.update },
                    |m: &mut ApbMapNestedUpdate| { &mut m.update },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbMapNestedUpdate>(
                    "ApbMapNestedUpdate",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbMapNestedUpdate {
        static mut instance: ::protobuf::lazy::Lazy<ApbMapNestedUpdate> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbMapNestedUpdate,
        };
        unsafe {
            instance.get(ApbMapNestedUpdate::new)
        }
    }
}

impl ::protobuf::Clear for ApbMapNestedUpdate {
    fn clear(&mut self) {
        self.clear_key();
        self.clear_update();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbMapNestedUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbMapNestedUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbGetMapResp {
    // message fields
    entries: ::protobuf::RepeatedField<ApbMapEntry>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbGetMapResp {
    pub fn new() -> ApbGetMapResp {
        ::std::default::Default::default()
    }

    // repeated .AntidotePB.ApbMapEntry entries = 1;

    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<ApbMapEntry>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<ApbMapEntry> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<ApbMapEntry> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }

    pub fn get_entries(&self) -> &[ApbMapEntry] {
        &self.entries
    }
}

impl ::protobuf::Message for ApbGetMapResp {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.entries {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbGetMapResp {
        ApbGetMapResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbMapEntry>>(
                    "entries",
                    |m: &ApbGetMapResp| { &m.entries },
                    |m: &mut ApbGetMapResp| { &mut m.entries },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbGetMapResp>(
                    "ApbGetMapResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbGetMapResp {
        static mut instance: ::protobuf::lazy::Lazy<ApbGetMapResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbGetMapResp,
        };
        unsafe {
            instance.get(ApbGetMapResp::new)
        }
    }
}

impl ::protobuf::Clear for ApbGetMapResp {
    fn clear(&mut self) {
        self.clear_entries();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbGetMapResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbGetMapResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbMapEntry {
    // message fields
    key: ::protobuf::SingularPtrField<ApbMapKey>,
    value: ::protobuf::SingularPtrField<ApbReadObjectResp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbMapEntry {
    pub fn new() -> ApbMapEntry {
        ::std::default::Default::default()
    }

    // required .AntidotePB.ApbMapKey key = 1;

    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ApbMapKey) {
        self.key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ApbMapKey {
        if self.key.is_none() {
            self.key.set_default();
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ApbMapKey {
        self.key.take().unwrap_or_else(|| ApbMapKey::new())
    }

    pub fn get_key(&self) -> &ApbMapKey {
        self.key.as_ref().unwrap_or_else(|| ApbMapKey::default_instance())
    }

    // required .AntidotePB.ApbReadObjectResp value = 2;

    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ApbReadObjectResp) {
        self.value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ApbReadObjectResp {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ApbReadObjectResp {
        self.value.take().unwrap_or_else(|| ApbReadObjectResp::new())
    }

    pub fn get_value(&self) -> &ApbReadObjectResp {
        self.value.as_ref().unwrap_or_else(|| ApbReadObjectResp::default_instance())
    }
}

impl ::protobuf::Message for ApbMapEntry {
    fn is_initialized(&self) -> bool {
        if self.key.is_none() {
            return false;
        }
        if self.value.is_none() {
            return false;
        }
        for v in &self.key {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.value {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.key.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.value.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbMapEntry {
        ApbMapEntry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbMapKey>>(
                    "key",
                    |m: &ApbMapEntry| { &m.key },
                    |m: &mut ApbMapEntry| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbReadObjectResp>>(
                    "value",
                    |m: &ApbMapEntry| { &m.value },
                    |m: &mut ApbMapEntry| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbMapEntry>(
                    "ApbMapEntry",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbMapEntry {
        static mut instance: ::protobuf::lazy::Lazy<ApbMapEntry> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbMapEntry,
        };
        unsafe {
            instance.get(ApbMapEntry::new)
        }
    }
}

impl ::protobuf::Clear for ApbMapEntry {
    fn clear(&mut self) {
        self.clear_key();
        self.clear_value();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbMapEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbMapEntry {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbFlagUpdate {
    // message fields
    value: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbFlagUpdate {
    pub fn new() -> ApbFlagUpdate {
        ::std::default::Default::default()
    }

    // required bool value = 1;

    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: bool) {
        self.value = ::std::option::Option::Some(v);
    }

    pub fn get_value(&self) -> bool {
        self.value.unwrap_or(false)
    }
}

impl ::protobuf::Message for ApbFlagUpdate {
    fn is_initialized(&self) -> bool {
        if self.value.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.value = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.value {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.value {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbFlagUpdate {
        ApbFlagUpdate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "value",
                    |m: &ApbFlagUpdate| { &m.value },
                    |m: &mut ApbFlagUpdate| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbFlagUpdate>(
                    "ApbFlagUpdate",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbFlagUpdate {
        static mut instance: ::protobuf::lazy::Lazy<ApbFlagUpdate> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbFlagUpdate,
        };
        unsafe {
            instance.get(ApbFlagUpdate::new)
        }
    }
}

impl ::protobuf::Clear for ApbFlagUpdate {
    fn clear(&mut self) {
        self.clear_value();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbFlagUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbFlagUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbGetFlagResp {
    // message fields
    value: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbGetFlagResp {
    pub fn new() -> ApbGetFlagResp {
        ::std::default::Default::default()
    }

    // required bool value = 1;

    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: bool) {
        self.value = ::std::option::Option::Some(v);
    }

    pub fn get_value(&self) -> bool {
        self.value.unwrap_or(false)
    }
}

impl ::protobuf::Message for ApbGetFlagResp {
    fn is_initialized(&self) -> bool {
        if self.value.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.value = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.value {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.value {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbGetFlagResp {
        ApbGetFlagResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "value",
                    |m: &ApbGetFlagResp| { &m.value },
                    |m: &mut ApbGetFlagResp| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbGetFlagResp>(
                    "ApbGetFlagResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbGetFlagResp {
        static mut instance: ::protobuf::lazy::Lazy<ApbGetFlagResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbGetFlagResp,
        };
        unsafe {
            instance.get(ApbGetFlagResp::new)
        }
    }
}

impl ::protobuf::Clear for ApbGetFlagResp {
    fn clear(&mut self) {
        self.clear_value();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbGetFlagResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbGetFlagResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbCrdtReset {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbCrdtReset {
    pub fn new() -> ApbCrdtReset {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ApbCrdtReset {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbCrdtReset {
        ApbCrdtReset::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<ApbCrdtReset>(
                    "ApbCrdtReset",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbCrdtReset {
        static mut instance: ::protobuf::lazy::Lazy<ApbCrdtReset> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbCrdtReset,
        };
        unsafe {
            instance.get(ApbCrdtReset::new)
        }
    }
}

impl ::protobuf::Clear for ApbCrdtReset {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbCrdtReset {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbCrdtReset {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbOperationResp {
    // message fields
    success: ::std::option::Option<bool>,
    errorcode: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbOperationResp {
    pub fn new() -> ApbOperationResp {
        ::std::default::Default::default()
    }

    // required bool success = 1;

    pub fn clear_success(&mut self) {
        self.success = ::std::option::Option::None;
    }

    pub fn has_success(&self) -> bool {
        self.success.is_some()
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = ::std::option::Option::Some(v);
    }

    pub fn get_success(&self) -> bool {
        self.success.unwrap_or(false)
    }

    // optional uint32 errorcode = 2;

    pub fn clear_errorcode(&mut self) {
        self.errorcode = ::std::option::Option::None;
    }

    pub fn has_errorcode(&self) -> bool {
        self.errorcode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_errorcode(&mut self, v: u32) {
        self.errorcode = ::std::option::Option::Some(v);
    }

    pub fn get_errorcode(&self) -> u32 {
        self.errorcode.unwrap_or(0)
    }
}

impl ::protobuf::Message for ApbOperationResp {
    fn is_initialized(&self) -> bool {
        if self.success.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.errorcode = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.success {
            my_size += 2;
        }
        if let Some(v) = self.errorcode {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.success {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.errorcode {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbOperationResp {
        ApbOperationResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "success",
                    |m: &ApbOperationResp| { &m.success },
                    |m: &mut ApbOperationResp| { &mut m.success },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "errorcode",
                    |m: &ApbOperationResp| { &m.errorcode },
                    |m: &mut ApbOperationResp| { &mut m.errorcode },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbOperationResp>(
                    "ApbOperationResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbOperationResp {
        static mut instance: ::protobuf::lazy::Lazy<ApbOperationResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbOperationResp,
        };
        unsafe {
            instance.get(ApbOperationResp::new)
        }
    }
}

impl ::protobuf::Clear for ApbOperationResp {
    fn clear(&mut self) {
        self.clear_success();
        self.clear_errorcode();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbOperationResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbOperationResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbTxnProperties {
    // message fields
    read_write: ::std::option::Option<u32>,
    red_blue: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbTxnProperties {
    pub fn new() -> ApbTxnProperties {
        ::std::default::Default::default()
    }

    // optional uint32 read_write = 1;

    pub fn clear_read_write(&mut self) {
        self.read_write = ::std::option::Option::None;
    }

    pub fn has_read_write(&self) -> bool {
        self.read_write.is_some()
    }

    // Param is passed by value, moved
    pub fn set_read_write(&mut self, v: u32) {
        self.read_write = ::std::option::Option::Some(v);
    }

    pub fn get_read_write(&self) -> u32 {
        self.read_write.unwrap_or(0)
    }

    // optional uint32 red_blue = 2;

    pub fn clear_red_blue(&mut self) {
        self.red_blue = ::std::option::Option::None;
    }

    pub fn has_red_blue(&self) -> bool {
        self.red_blue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_red_blue(&mut self, v: u32) {
        self.red_blue = ::std::option::Option::Some(v);
    }

    pub fn get_red_blue(&self) -> u32 {
        self.red_blue.unwrap_or(0)
    }
}

impl ::protobuf::Message for ApbTxnProperties {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.read_write = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.red_blue = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.read_write {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.red_blue {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.read_write {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.red_blue {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbTxnProperties {
        ApbTxnProperties::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "read_write",
                    |m: &ApbTxnProperties| { &m.read_write },
                    |m: &mut ApbTxnProperties| { &mut m.read_write },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "red_blue",
                    |m: &ApbTxnProperties| { &m.red_blue },
                    |m: &mut ApbTxnProperties| { &mut m.red_blue },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbTxnProperties>(
                    "ApbTxnProperties",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbTxnProperties {
        static mut instance: ::protobuf::lazy::Lazy<ApbTxnProperties> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbTxnProperties,
        };
        unsafe {
            instance.get(ApbTxnProperties::new)
        }
    }
}

impl ::protobuf::Clear for ApbTxnProperties {
    fn clear(&mut self) {
        self.clear_read_write();
        self.clear_red_blue();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbTxnProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbTxnProperties {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbBoundObject {
    // message fields
    key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    field_type: ::std::option::Option<CRDT_type>,
    bucket: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbBoundObject {
    pub fn new() -> ApbBoundObject {
        ::std::default::Default::default()
    }

    // required bytes key = 1;

    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.key.is_none() {
            self.key.set_default();
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::vec::Vec<u8> {
        self.key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_key(&self) -> &[u8] {
        match self.key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // required .AntidotePB.CRDT_type type = 2;

    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: CRDT_type) {
        self.field_type = ::std::option::Option::Some(v);
    }

    pub fn get_field_type(&self) -> CRDT_type {
        self.field_type.unwrap_or(CRDT_type::COUNTER)
    }

    // required bytes bucket = 3;

    pub fn clear_bucket(&mut self) {
        self.bucket.clear();
    }

    pub fn has_bucket(&self) -> bool {
        self.bucket.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bucket(&mut self, v: ::std::vec::Vec<u8>) {
        self.bucket = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bucket(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.bucket.is_none() {
            self.bucket.set_default();
        }
        self.bucket.as_mut().unwrap()
    }

    // Take field
    pub fn take_bucket(&mut self) -> ::std::vec::Vec<u8> {
        self.bucket.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_bucket(&self) -> &[u8] {
        match self.bucket.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
}

impl ::protobuf::Message for ApbBoundObject {
    fn is_initialized(&self) -> bool {
        if self.key.is_none() {
            return false;
        }
        if self.field_type.is_none() {
            return false;
        }
        if self.bucket.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.bucket)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        if let Some(ref v) = self.bucket.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.key.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(v) = self.field_type {
            os.write_enum(2, v.value())?;
        }
        if let Some(ref v) = self.bucket.as_ref() {
            os.write_bytes(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbBoundObject {
        ApbBoundObject::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "key",
                    |m: &ApbBoundObject| { &m.key },
                    |m: &mut ApbBoundObject| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CRDT_type>>(
                    "type",
                    |m: &ApbBoundObject| { &m.field_type },
                    |m: &mut ApbBoundObject| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "bucket",
                    |m: &ApbBoundObject| { &m.bucket },
                    |m: &mut ApbBoundObject| { &mut m.bucket },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbBoundObject>(
                    "ApbBoundObject",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbBoundObject {
        static mut instance: ::protobuf::lazy::Lazy<ApbBoundObject> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbBoundObject,
        };
        unsafe {
            instance.get(ApbBoundObject::new)
        }
    }
}

impl ::protobuf::Clear for ApbBoundObject {
    fn clear(&mut self) {
        self.clear_key();
        self.clear_field_type();
        self.clear_bucket();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbBoundObject {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbBoundObject {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbReadObjects {
    // message fields
    boundobjects: ::protobuf::RepeatedField<ApbBoundObject>,
    transaction_descriptor: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbReadObjects {
    pub fn new() -> ApbReadObjects {
        ::std::default::Default::default()
    }

    // repeated .AntidotePB.ApbBoundObject boundobjects = 1;

    pub fn clear_boundobjects(&mut self) {
        self.boundobjects.clear();
    }

    // Param is passed by value, moved
    pub fn set_boundobjects(&mut self, v: ::protobuf::RepeatedField<ApbBoundObject>) {
        self.boundobjects = v;
    }

    // Mutable pointer to the field.
    pub fn mut_boundobjects(&mut self) -> &mut ::protobuf::RepeatedField<ApbBoundObject> {
        &mut self.boundobjects
    }

    // Take field
    pub fn take_boundobjects(&mut self) -> ::protobuf::RepeatedField<ApbBoundObject> {
        ::std::mem::replace(&mut self.boundobjects, ::protobuf::RepeatedField::new())
    }

    pub fn get_boundobjects(&self) -> &[ApbBoundObject] {
        &self.boundobjects
    }

    // required bytes transaction_descriptor = 2;

    pub fn clear_transaction_descriptor(&mut self) {
        self.transaction_descriptor.clear();
    }

    pub fn has_transaction_descriptor(&self) -> bool {
        self.transaction_descriptor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction_descriptor(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction_descriptor = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_descriptor(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.transaction_descriptor.is_none() {
            self.transaction_descriptor.set_default();
        }
        self.transaction_descriptor.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction_descriptor(&mut self) -> ::std::vec::Vec<u8> {
        self.transaction_descriptor.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_transaction_descriptor(&self) -> &[u8] {
        match self.transaction_descriptor.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
}

impl ::protobuf::Message for ApbReadObjects {
    fn is_initialized(&self) -> bool {
        if self.transaction_descriptor.is_none() {
            return false;
        }
        for v in &self.boundobjects {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.boundobjects)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.transaction_descriptor)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.boundobjects {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.transaction_descriptor.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.boundobjects {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.transaction_descriptor.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbReadObjects {
        ApbReadObjects::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbBoundObject>>(
                    "boundobjects",
                    |m: &ApbReadObjects| { &m.boundobjects },
                    |m: &mut ApbReadObjects| { &mut m.boundobjects },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "transaction_descriptor",
                    |m: &ApbReadObjects| { &m.transaction_descriptor },
                    |m: &mut ApbReadObjects| { &mut m.transaction_descriptor },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbReadObjects>(
                    "ApbReadObjects",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbReadObjects {
        static mut instance: ::protobuf::lazy::Lazy<ApbReadObjects> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbReadObjects,
        };
        unsafe {
            instance.get(ApbReadObjects::new)
        }
    }
}

impl ::protobuf::Clear for ApbReadObjects {
    fn clear(&mut self) {
        self.clear_boundobjects();
        self.clear_transaction_descriptor();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbReadObjects {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbReadObjects {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbUpdateOp {
    // message fields
    boundobject: ::protobuf::SingularPtrField<ApbBoundObject>,
    operation: ::protobuf::SingularPtrField<ApbUpdateOperation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbUpdateOp {
    pub fn new() -> ApbUpdateOp {
        ::std::default::Default::default()
    }

    // required .AntidotePB.ApbBoundObject boundobject = 1;

    pub fn clear_boundobject(&mut self) {
        self.boundobject.clear();
    }

    pub fn has_boundobject(&self) -> bool {
        self.boundobject.is_some()
    }

    // Param is passed by value, moved
    pub fn set_boundobject(&mut self, v: ApbBoundObject) {
        self.boundobject = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_boundobject(&mut self) -> &mut ApbBoundObject {
        if self.boundobject.is_none() {
            self.boundobject.set_default();
        }
        self.boundobject.as_mut().unwrap()
    }

    // Take field
    pub fn take_boundobject(&mut self) -> ApbBoundObject {
        self.boundobject.take().unwrap_or_else(|| ApbBoundObject::new())
    }

    pub fn get_boundobject(&self) -> &ApbBoundObject {
        self.boundobject.as_ref().unwrap_or_else(|| ApbBoundObject::default_instance())
    }

    // required .AntidotePB.ApbUpdateOperation operation = 2;

    pub fn clear_operation(&mut self) {
        self.operation.clear();
    }

    pub fn has_operation(&self) -> bool {
        self.operation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_operation(&mut self, v: ApbUpdateOperation) {
        self.operation = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_operation(&mut self) -> &mut ApbUpdateOperation {
        if self.operation.is_none() {
            self.operation.set_default();
        }
        self.operation.as_mut().unwrap()
    }

    // Take field
    pub fn take_operation(&mut self) -> ApbUpdateOperation {
        self.operation.take().unwrap_or_else(|| ApbUpdateOperation::new())
    }

    pub fn get_operation(&self) -> &ApbUpdateOperation {
        self.operation.as_ref().unwrap_or_else(|| ApbUpdateOperation::default_instance())
    }
}

impl ::protobuf::Message for ApbUpdateOp {
    fn is_initialized(&self) -> bool {
        if self.boundobject.is_none() {
            return false;
        }
        if self.operation.is_none() {
            return false;
        }
        for v in &self.boundobject {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.operation {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.boundobject)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.operation)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.boundobject.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.operation.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.boundobject.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.operation.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbUpdateOp {
        ApbUpdateOp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbBoundObject>>(
                    "boundobject",
                    |m: &ApbUpdateOp| { &m.boundobject },
                    |m: &mut ApbUpdateOp| { &mut m.boundobject },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbUpdateOperation>>(
                    "operation",
                    |m: &ApbUpdateOp| { &m.operation },
                    |m: &mut ApbUpdateOp| { &mut m.operation },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbUpdateOp>(
                    "ApbUpdateOp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbUpdateOp {
        static mut instance: ::protobuf::lazy::Lazy<ApbUpdateOp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbUpdateOp,
        };
        unsafe {
            instance.get(ApbUpdateOp::new)
        }
    }
}

impl ::protobuf::Clear for ApbUpdateOp {
    fn clear(&mut self) {
        self.clear_boundobject();
        self.clear_operation();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbUpdateOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbUpdateOp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbUpdateOperation {
    // message fields
    counterop: ::protobuf::SingularPtrField<ApbCounterUpdate>,
    setop: ::protobuf::SingularPtrField<ApbSetUpdate>,
    regop: ::protobuf::SingularPtrField<ApbRegUpdate>,
    mapop: ::protobuf::SingularPtrField<ApbMapUpdate>,
    resetop: ::protobuf::SingularPtrField<ApbCrdtReset>,
    flagop: ::protobuf::SingularPtrField<ApbFlagUpdate>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbUpdateOperation {
    pub fn new() -> ApbUpdateOperation {
        ::std::default::Default::default()
    }

    // optional .AntidotePB.ApbCounterUpdate counterop = 1;

    pub fn clear_counterop(&mut self) {
        self.counterop.clear();
    }

    pub fn has_counterop(&self) -> bool {
        self.counterop.is_some()
    }

    // Param is passed by value, moved
    pub fn set_counterop(&mut self, v: ApbCounterUpdate) {
        self.counterop = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counterop(&mut self) -> &mut ApbCounterUpdate {
        if self.counterop.is_none() {
            self.counterop.set_default();
        }
        self.counterop.as_mut().unwrap()
    }

    // Take field
    pub fn take_counterop(&mut self) -> ApbCounterUpdate {
        self.counterop.take().unwrap_or_else(|| ApbCounterUpdate::new())
    }

    pub fn get_counterop(&self) -> &ApbCounterUpdate {
        self.counterop.as_ref().unwrap_or_else(|| ApbCounterUpdate::default_instance())
    }

    // optional .AntidotePB.ApbSetUpdate setop = 2;

    pub fn clear_setop(&mut self) {
        self.setop.clear();
    }

    pub fn has_setop(&self) -> bool {
        self.setop.is_some()
    }

    // Param is passed by value, moved
    pub fn set_setop(&mut self, v: ApbSetUpdate) {
        self.setop = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_setop(&mut self) -> &mut ApbSetUpdate {
        if self.setop.is_none() {
            self.setop.set_default();
        }
        self.setop.as_mut().unwrap()
    }

    // Take field
    pub fn take_setop(&mut self) -> ApbSetUpdate {
        self.setop.take().unwrap_or_else(|| ApbSetUpdate::new())
    }

    pub fn get_setop(&self) -> &ApbSetUpdate {
        self.setop.as_ref().unwrap_or_else(|| ApbSetUpdate::default_instance())
    }

    // optional .AntidotePB.ApbRegUpdate regop = 3;

    pub fn clear_regop(&mut self) {
        self.regop.clear();
    }

    pub fn has_regop(&self) -> bool {
        self.regop.is_some()
    }

    // Param is passed by value, moved
    pub fn set_regop(&mut self, v: ApbRegUpdate) {
        self.regop = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_regop(&mut self) -> &mut ApbRegUpdate {
        if self.regop.is_none() {
            self.regop.set_default();
        }
        self.regop.as_mut().unwrap()
    }

    // Take field
    pub fn take_regop(&mut self) -> ApbRegUpdate {
        self.regop.take().unwrap_or_else(|| ApbRegUpdate::new())
    }

    pub fn get_regop(&self) -> &ApbRegUpdate {
        self.regop.as_ref().unwrap_or_else(|| ApbRegUpdate::default_instance())
    }

    // optional .AntidotePB.ApbMapUpdate mapop = 5;

    pub fn clear_mapop(&mut self) {
        self.mapop.clear();
    }

    pub fn has_mapop(&self) -> bool {
        self.mapop.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mapop(&mut self, v: ApbMapUpdate) {
        self.mapop = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mapop(&mut self) -> &mut ApbMapUpdate {
        if self.mapop.is_none() {
            self.mapop.set_default();
        }
        self.mapop.as_mut().unwrap()
    }

    // Take field
    pub fn take_mapop(&mut self) -> ApbMapUpdate {
        self.mapop.take().unwrap_or_else(|| ApbMapUpdate::new())
    }

    pub fn get_mapop(&self) -> &ApbMapUpdate {
        self.mapop.as_ref().unwrap_or_else(|| ApbMapUpdate::default_instance())
    }

    // optional .AntidotePB.ApbCrdtReset resetop = 6;

    pub fn clear_resetop(&mut self) {
        self.resetop.clear();
    }

    pub fn has_resetop(&self) -> bool {
        self.resetop.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resetop(&mut self, v: ApbCrdtReset) {
        self.resetop = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resetop(&mut self) -> &mut ApbCrdtReset {
        if self.resetop.is_none() {
            self.resetop.set_default();
        }
        self.resetop.as_mut().unwrap()
    }

    // Take field
    pub fn take_resetop(&mut self) -> ApbCrdtReset {
        self.resetop.take().unwrap_or_else(|| ApbCrdtReset::new())
    }

    pub fn get_resetop(&self) -> &ApbCrdtReset {
        self.resetop.as_ref().unwrap_or_else(|| ApbCrdtReset::default_instance())
    }

    // optional .AntidotePB.ApbFlagUpdate flagop = 7;

    pub fn clear_flagop(&mut self) {
        self.flagop.clear();
    }

    pub fn has_flagop(&self) -> bool {
        self.flagop.is_some()
    }

    // Param is passed by value, moved
    pub fn set_flagop(&mut self, v: ApbFlagUpdate) {
        self.flagop = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_flagop(&mut self) -> &mut ApbFlagUpdate {
        if self.flagop.is_none() {
            self.flagop.set_default();
        }
        self.flagop.as_mut().unwrap()
    }

    // Take field
    pub fn take_flagop(&mut self) -> ApbFlagUpdate {
        self.flagop.take().unwrap_or_else(|| ApbFlagUpdate::new())
    }

    pub fn get_flagop(&self) -> &ApbFlagUpdate {
        self.flagop.as_ref().unwrap_or_else(|| ApbFlagUpdate::default_instance())
    }
}

impl ::protobuf::Message for ApbUpdateOperation {
    fn is_initialized(&self) -> bool {
        for v in &self.counterop {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.setop {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.regop {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.mapop {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.resetop {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.flagop {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.counterop)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.setop)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.regop)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.mapop)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resetop)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.flagop)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.counterop.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.setop.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.regop.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.mapop.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.resetop.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.flagop.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.counterop.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.setop.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.regop.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.mapop.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.resetop.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.flagop.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbUpdateOperation {
        ApbUpdateOperation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbCounterUpdate>>(
                    "counterop",
                    |m: &ApbUpdateOperation| { &m.counterop },
                    |m: &mut ApbUpdateOperation| { &mut m.counterop },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbSetUpdate>>(
                    "setop",
                    |m: &ApbUpdateOperation| { &m.setop },
                    |m: &mut ApbUpdateOperation| { &mut m.setop },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbRegUpdate>>(
                    "regop",
                    |m: &ApbUpdateOperation| { &m.regop },
                    |m: &mut ApbUpdateOperation| { &mut m.regop },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbMapUpdate>>(
                    "mapop",
                    |m: &ApbUpdateOperation| { &m.mapop },
                    |m: &mut ApbUpdateOperation| { &mut m.mapop },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbCrdtReset>>(
                    "resetop",
                    |m: &ApbUpdateOperation| { &m.resetop },
                    |m: &mut ApbUpdateOperation| { &mut m.resetop },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbFlagUpdate>>(
                    "flagop",
                    |m: &ApbUpdateOperation| { &m.flagop },
                    |m: &mut ApbUpdateOperation| { &mut m.flagop },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbUpdateOperation>(
                    "ApbUpdateOperation",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbUpdateOperation {
        static mut instance: ::protobuf::lazy::Lazy<ApbUpdateOperation> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbUpdateOperation,
        };
        unsafe {
            instance.get(ApbUpdateOperation::new)
        }
    }
}

impl ::protobuf::Clear for ApbUpdateOperation {
    fn clear(&mut self) {
        self.clear_counterop();
        self.clear_setop();
        self.clear_regop();
        self.clear_mapop();
        self.clear_resetop();
        self.clear_flagop();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbUpdateOperation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbUpdateOperation {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbUpdateObjects {
    // message fields
    updates: ::protobuf::RepeatedField<ApbUpdateOp>,
    transaction_descriptor: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbUpdateObjects {
    pub fn new() -> ApbUpdateObjects {
        ::std::default::Default::default()
    }

    // repeated .AntidotePB.ApbUpdateOp updates = 1;

    pub fn clear_updates(&mut self) {
        self.updates.clear();
    }

    // Param is passed by value, moved
    pub fn set_updates(&mut self, v: ::protobuf::RepeatedField<ApbUpdateOp>) {
        self.updates = v;
    }

    // Mutable pointer to the field.
    pub fn mut_updates(&mut self) -> &mut ::protobuf::RepeatedField<ApbUpdateOp> {
        &mut self.updates
    }

    // Take field
    pub fn take_updates(&mut self) -> ::protobuf::RepeatedField<ApbUpdateOp> {
        ::std::mem::replace(&mut self.updates, ::protobuf::RepeatedField::new())
    }

    pub fn get_updates(&self) -> &[ApbUpdateOp] {
        &self.updates
    }

    // required bytes transaction_descriptor = 2;

    pub fn clear_transaction_descriptor(&mut self) {
        self.transaction_descriptor.clear();
    }

    pub fn has_transaction_descriptor(&self) -> bool {
        self.transaction_descriptor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction_descriptor(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction_descriptor = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_descriptor(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.transaction_descriptor.is_none() {
            self.transaction_descriptor.set_default();
        }
        self.transaction_descriptor.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction_descriptor(&mut self) -> ::std::vec::Vec<u8> {
        self.transaction_descriptor.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_transaction_descriptor(&self) -> &[u8] {
        match self.transaction_descriptor.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
}

impl ::protobuf::Message for ApbUpdateObjects {
    fn is_initialized(&self) -> bool {
        if self.transaction_descriptor.is_none() {
            return false;
        }
        for v in &self.updates {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.updates)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.transaction_descriptor)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.updates {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.transaction_descriptor.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.updates {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.transaction_descriptor.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbUpdateObjects {
        ApbUpdateObjects::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbUpdateOp>>(
                    "updates",
                    |m: &ApbUpdateObjects| { &m.updates },
                    |m: &mut ApbUpdateObjects| { &mut m.updates },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "transaction_descriptor",
                    |m: &ApbUpdateObjects| { &m.transaction_descriptor },
                    |m: &mut ApbUpdateObjects| { &mut m.transaction_descriptor },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbUpdateObjects>(
                    "ApbUpdateObjects",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbUpdateObjects {
        static mut instance: ::protobuf::lazy::Lazy<ApbUpdateObjects> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbUpdateObjects,
        };
        unsafe {
            instance.get(ApbUpdateObjects::new)
        }
    }
}

impl ::protobuf::Clear for ApbUpdateObjects {
    fn clear(&mut self) {
        self.clear_updates();
        self.clear_transaction_descriptor();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbUpdateObjects {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbUpdateObjects {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbStartTransaction {
    // message fields
    timestamp: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    properties: ::protobuf::SingularPtrField<ApbTxnProperties>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbStartTransaction {
    pub fn new() -> ApbStartTransaction {
        ::std::default::Default::default()
    }

    // optional bytes timestamp = 1;

    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::std::vec::Vec<u8>) {
        self.timestamp = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.timestamp.is_none() {
            self.timestamp.set_default();
        }
        self.timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::std::vec::Vec<u8> {
        self.timestamp.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_timestamp(&self) -> &[u8] {
        match self.timestamp.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // optional .AntidotePB.ApbTxnProperties properties = 2;

    pub fn clear_properties(&mut self) {
        self.properties.clear();
    }

    pub fn has_properties(&self) -> bool {
        self.properties.is_some()
    }

    // Param is passed by value, moved
    pub fn set_properties(&mut self, v: ApbTxnProperties) {
        self.properties = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_properties(&mut self) -> &mut ApbTxnProperties {
        if self.properties.is_none() {
            self.properties.set_default();
        }
        self.properties.as_mut().unwrap()
    }

    // Take field
    pub fn take_properties(&mut self) -> ApbTxnProperties {
        self.properties.take().unwrap_or_else(|| ApbTxnProperties::new())
    }

    pub fn get_properties(&self) -> &ApbTxnProperties {
        self.properties.as_ref().unwrap_or_else(|| ApbTxnProperties::default_instance())
    }
}

impl ::protobuf::Message for ApbStartTransaction {
    fn is_initialized(&self) -> bool {
        for v in &self.properties {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.timestamp)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.properties)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.timestamp.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.properties.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.timestamp.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.properties.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbStartTransaction {
        ApbStartTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "timestamp",
                    |m: &ApbStartTransaction| { &m.timestamp },
                    |m: &mut ApbStartTransaction| { &mut m.timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbTxnProperties>>(
                    "properties",
                    |m: &ApbStartTransaction| { &m.properties },
                    |m: &mut ApbStartTransaction| { &mut m.properties },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbStartTransaction>(
                    "ApbStartTransaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbStartTransaction {
        static mut instance: ::protobuf::lazy::Lazy<ApbStartTransaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbStartTransaction,
        };
        unsafe {
            instance.get(ApbStartTransaction::new)
        }
    }
}

impl ::protobuf::Clear for ApbStartTransaction {
    fn clear(&mut self) {
        self.clear_timestamp();
        self.clear_properties();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbStartTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbStartTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbAbortTransaction {
    // message fields
    transaction_descriptor: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbAbortTransaction {
    pub fn new() -> ApbAbortTransaction {
        ::std::default::Default::default()
    }

    // required bytes transaction_descriptor = 1;

    pub fn clear_transaction_descriptor(&mut self) {
        self.transaction_descriptor.clear();
    }

    pub fn has_transaction_descriptor(&self) -> bool {
        self.transaction_descriptor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction_descriptor(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction_descriptor = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_descriptor(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.transaction_descriptor.is_none() {
            self.transaction_descriptor.set_default();
        }
        self.transaction_descriptor.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction_descriptor(&mut self) -> ::std::vec::Vec<u8> {
        self.transaction_descriptor.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_transaction_descriptor(&self) -> &[u8] {
        match self.transaction_descriptor.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
}

impl ::protobuf::Message for ApbAbortTransaction {
    fn is_initialized(&self) -> bool {
        if self.transaction_descriptor.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.transaction_descriptor)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.transaction_descriptor.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.transaction_descriptor.as_ref() {
            os.write_bytes(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbAbortTransaction {
        ApbAbortTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "transaction_descriptor",
                    |m: &ApbAbortTransaction| { &m.transaction_descriptor },
                    |m: &mut ApbAbortTransaction| { &mut m.transaction_descriptor },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbAbortTransaction>(
                    "ApbAbortTransaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbAbortTransaction {
        static mut instance: ::protobuf::lazy::Lazy<ApbAbortTransaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbAbortTransaction,
        };
        unsafe {
            instance.get(ApbAbortTransaction::new)
        }
    }
}

impl ::protobuf::Clear for ApbAbortTransaction {
    fn clear(&mut self) {
        self.clear_transaction_descriptor();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbAbortTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbAbortTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbCommitTransaction {
    // message fields
    transaction_descriptor: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbCommitTransaction {
    pub fn new() -> ApbCommitTransaction {
        ::std::default::Default::default()
    }

    // required bytes transaction_descriptor = 1;

    pub fn clear_transaction_descriptor(&mut self) {
        self.transaction_descriptor.clear();
    }

    pub fn has_transaction_descriptor(&self) -> bool {
        self.transaction_descriptor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction_descriptor(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction_descriptor = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_descriptor(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.transaction_descriptor.is_none() {
            self.transaction_descriptor.set_default();
        }
        self.transaction_descriptor.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction_descriptor(&mut self) -> ::std::vec::Vec<u8> {
        self.transaction_descriptor.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_transaction_descriptor(&self) -> &[u8] {
        match self.transaction_descriptor.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
}

impl ::protobuf::Message for ApbCommitTransaction {
    fn is_initialized(&self) -> bool {
        if self.transaction_descriptor.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.transaction_descriptor)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.transaction_descriptor.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.transaction_descriptor.as_ref() {
            os.write_bytes(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbCommitTransaction {
        ApbCommitTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "transaction_descriptor",
                    |m: &ApbCommitTransaction| { &m.transaction_descriptor },
                    |m: &mut ApbCommitTransaction| { &mut m.transaction_descriptor },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbCommitTransaction>(
                    "ApbCommitTransaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbCommitTransaction {
        static mut instance: ::protobuf::lazy::Lazy<ApbCommitTransaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbCommitTransaction,
        };
        unsafe {
            instance.get(ApbCommitTransaction::new)
        }
    }
}

impl ::protobuf::Clear for ApbCommitTransaction {
    fn clear(&mut self) {
        self.clear_transaction_descriptor();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbCommitTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbCommitTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbStaticUpdateObjects {
    // message fields
    transaction: ::protobuf::SingularPtrField<ApbStartTransaction>,
    updates: ::protobuf::RepeatedField<ApbUpdateOp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbStaticUpdateObjects {
    pub fn new() -> ApbStaticUpdateObjects {
        ::std::default::Default::default()
    }

    // required .AntidotePB.ApbStartTransaction transaction = 1;

    pub fn clear_transaction(&mut self) {
        self.transaction.clear();
    }

    pub fn has_transaction(&self) -> bool {
        self.transaction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction(&mut self, v: ApbStartTransaction) {
        self.transaction = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction(&mut self) -> &mut ApbStartTransaction {
        if self.transaction.is_none() {
            self.transaction.set_default();
        }
        self.transaction.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction(&mut self) -> ApbStartTransaction {
        self.transaction.take().unwrap_or_else(|| ApbStartTransaction::new())
    }

    pub fn get_transaction(&self) -> &ApbStartTransaction {
        self.transaction.as_ref().unwrap_or_else(|| ApbStartTransaction::default_instance())
    }

    // repeated .AntidotePB.ApbUpdateOp updates = 2;

    pub fn clear_updates(&mut self) {
        self.updates.clear();
    }

    // Param is passed by value, moved
    pub fn set_updates(&mut self, v: ::protobuf::RepeatedField<ApbUpdateOp>) {
        self.updates = v;
    }

    // Mutable pointer to the field.
    pub fn mut_updates(&mut self) -> &mut ::protobuf::RepeatedField<ApbUpdateOp> {
        &mut self.updates
    }

    // Take field
    pub fn take_updates(&mut self) -> ::protobuf::RepeatedField<ApbUpdateOp> {
        ::std::mem::replace(&mut self.updates, ::protobuf::RepeatedField::new())
    }

    pub fn get_updates(&self) -> &[ApbUpdateOp] {
        &self.updates
    }
}

impl ::protobuf::Message for ApbStaticUpdateObjects {
    fn is_initialized(&self) -> bool {
        if self.transaction.is_none() {
            return false;
        }
        for v in &self.transaction {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.updates {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transaction)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.updates)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.transaction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.updates {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.transaction.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.updates {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbStaticUpdateObjects {
        ApbStaticUpdateObjects::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbStartTransaction>>(
                    "transaction",
                    |m: &ApbStaticUpdateObjects| { &m.transaction },
                    |m: &mut ApbStaticUpdateObjects| { &mut m.transaction },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbUpdateOp>>(
                    "updates",
                    |m: &ApbStaticUpdateObjects| { &m.updates },
                    |m: &mut ApbStaticUpdateObjects| { &mut m.updates },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbStaticUpdateObjects>(
                    "ApbStaticUpdateObjects",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbStaticUpdateObjects {
        static mut instance: ::protobuf::lazy::Lazy<ApbStaticUpdateObjects> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbStaticUpdateObjects,
        };
        unsafe {
            instance.get(ApbStaticUpdateObjects::new)
        }
    }
}

impl ::protobuf::Clear for ApbStaticUpdateObjects {
    fn clear(&mut self) {
        self.clear_transaction();
        self.clear_updates();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbStaticUpdateObjects {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbStaticUpdateObjects {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbStaticReadObjects {
    // message fields
    transaction: ::protobuf::SingularPtrField<ApbStartTransaction>,
    objects: ::protobuf::RepeatedField<ApbBoundObject>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbStaticReadObjects {
    pub fn new() -> ApbStaticReadObjects {
        ::std::default::Default::default()
    }

    // required .AntidotePB.ApbStartTransaction transaction = 1;

    pub fn clear_transaction(&mut self) {
        self.transaction.clear();
    }

    pub fn has_transaction(&self) -> bool {
        self.transaction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction(&mut self, v: ApbStartTransaction) {
        self.transaction = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction(&mut self) -> &mut ApbStartTransaction {
        if self.transaction.is_none() {
            self.transaction.set_default();
        }
        self.transaction.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction(&mut self) -> ApbStartTransaction {
        self.transaction.take().unwrap_or_else(|| ApbStartTransaction::new())
    }

    pub fn get_transaction(&self) -> &ApbStartTransaction {
        self.transaction.as_ref().unwrap_or_else(|| ApbStartTransaction::default_instance())
    }

    // repeated .AntidotePB.ApbBoundObject objects = 2;

    pub fn clear_objects(&mut self) {
        self.objects.clear();
    }

    // Param is passed by value, moved
    pub fn set_objects(&mut self, v: ::protobuf::RepeatedField<ApbBoundObject>) {
        self.objects = v;
    }

    // Mutable pointer to the field.
    pub fn mut_objects(&mut self) -> &mut ::protobuf::RepeatedField<ApbBoundObject> {
        &mut self.objects
    }

    // Take field
    pub fn take_objects(&mut self) -> ::protobuf::RepeatedField<ApbBoundObject> {
        ::std::mem::replace(&mut self.objects, ::protobuf::RepeatedField::new())
    }

    pub fn get_objects(&self) -> &[ApbBoundObject] {
        &self.objects
    }
}

impl ::protobuf::Message for ApbStaticReadObjects {
    fn is_initialized(&self) -> bool {
        if self.transaction.is_none() {
            return false;
        }
        for v in &self.transaction {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.objects {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transaction)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.objects)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.transaction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.objects {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.transaction.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.objects {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbStaticReadObjects {
        ApbStaticReadObjects::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbStartTransaction>>(
                    "transaction",
                    |m: &ApbStaticReadObjects| { &m.transaction },
                    |m: &mut ApbStaticReadObjects| { &mut m.transaction },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbBoundObject>>(
                    "objects",
                    |m: &ApbStaticReadObjects| { &m.objects },
                    |m: &mut ApbStaticReadObjects| { &mut m.objects },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbStaticReadObjects>(
                    "ApbStaticReadObjects",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbStaticReadObjects {
        static mut instance: ::protobuf::lazy::Lazy<ApbStaticReadObjects> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbStaticReadObjects,
        };
        unsafe {
            instance.get(ApbStaticReadObjects::new)
        }
    }
}

impl ::protobuf::Clear for ApbStaticReadObjects {
    fn clear(&mut self) {
        self.clear_transaction();
        self.clear_objects();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbStaticReadObjects {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbStaticReadObjects {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbStartTransactionResp {
    // message fields
    success: ::std::option::Option<bool>,
    transaction_descriptor: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    errorcode: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbStartTransactionResp {
    pub fn new() -> ApbStartTransactionResp {
        ::std::default::Default::default()
    }

    // required bool success = 1;

    pub fn clear_success(&mut self) {
        self.success = ::std::option::Option::None;
    }

    pub fn has_success(&self) -> bool {
        self.success.is_some()
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = ::std::option::Option::Some(v);
    }

    pub fn get_success(&self) -> bool {
        self.success.unwrap_or(false)
    }

    // optional bytes transaction_descriptor = 2;

    pub fn clear_transaction_descriptor(&mut self) {
        self.transaction_descriptor.clear();
    }

    pub fn has_transaction_descriptor(&self) -> bool {
        self.transaction_descriptor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction_descriptor(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction_descriptor = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_descriptor(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.transaction_descriptor.is_none() {
            self.transaction_descriptor.set_default();
        }
        self.transaction_descriptor.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction_descriptor(&mut self) -> ::std::vec::Vec<u8> {
        self.transaction_descriptor.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_transaction_descriptor(&self) -> &[u8] {
        match self.transaction_descriptor.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // optional uint32 errorcode = 3;

    pub fn clear_errorcode(&mut self) {
        self.errorcode = ::std::option::Option::None;
    }

    pub fn has_errorcode(&self) -> bool {
        self.errorcode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_errorcode(&mut self, v: u32) {
        self.errorcode = ::std::option::Option::Some(v);
    }

    pub fn get_errorcode(&self) -> u32 {
        self.errorcode.unwrap_or(0)
    }
}

impl ::protobuf::Message for ApbStartTransactionResp {
    fn is_initialized(&self) -> bool {
        if self.success.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.transaction_descriptor)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.errorcode = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.success {
            my_size += 2;
        }
        if let Some(ref v) = self.transaction_descriptor.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.errorcode {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.success {
            os.write_bool(1, v)?;
        }
        if let Some(ref v) = self.transaction_descriptor.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(v) = self.errorcode {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbStartTransactionResp {
        ApbStartTransactionResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "success",
                    |m: &ApbStartTransactionResp| { &m.success },
                    |m: &mut ApbStartTransactionResp| { &mut m.success },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "transaction_descriptor",
                    |m: &ApbStartTransactionResp| { &m.transaction_descriptor },
                    |m: &mut ApbStartTransactionResp| { &mut m.transaction_descriptor },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "errorcode",
                    |m: &ApbStartTransactionResp| { &m.errorcode },
                    |m: &mut ApbStartTransactionResp| { &mut m.errorcode },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbStartTransactionResp>(
                    "ApbStartTransactionResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbStartTransactionResp {
        static mut instance: ::protobuf::lazy::Lazy<ApbStartTransactionResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbStartTransactionResp,
        };
        unsafe {
            instance.get(ApbStartTransactionResp::new)
        }
    }
}

impl ::protobuf::Clear for ApbStartTransactionResp {
    fn clear(&mut self) {
        self.clear_success();
        self.clear_transaction_descriptor();
        self.clear_errorcode();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbStartTransactionResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbStartTransactionResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbReadObjectResp {
    // message fields
    counter: ::protobuf::SingularPtrField<ApbGetCounterResp>,
    set: ::protobuf::SingularPtrField<ApbGetSetResp>,
    reg: ::protobuf::SingularPtrField<ApbGetRegResp>,
    mvreg: ::protobuf::SingularPtrField<ApbGetMVRegResp>,
    map: ::protobuf::SingularPtrField<ApbGetMapResp>,
    flag: ::protobuf::SingularPtrField<ApbGetFlagResp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbReadObjectResp {
    pub fn new() -> ApbReadObjectResp {
        ::std::default::Default::default()
    }

    // optional .AntidotePB.ApbGetCounterResp counter = 1;

    pub fn clear_counter(&mut self) {
        self.counter.clear();
    }

    pub fn has_counter(&self) -> bool {
        self.counter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_counter(&mut self, v: ApbGetCounterResp) {
        self.counter = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counter(&mut self) -> &mut ApbGetCounterResp {
        if self.counter.is_none() {
            self.counter.set_default();
        }
        self.counter.as_mut().unwrap()
    }

    // Take field
    pub fn take_counter(&mut self) -> ApbGetCounterResp {
        self.counter.take().unwrap_or_else(|| ApbGetCounterResp::new())
    }

    pub fn get_counter(&self) -> &ApbGetCounterResp {
        self.counter.as_ref().unwrap_or_else(|| ApbGetCounterResp::default_instance())
    }

    // optional .AntidotePB.ApbGetSetResp set = 2;

    pub fn clear_set(&mut self) {
        self.set.clear();
    }

    pub fn has_set(&self) -> bool {
        self.set.is_some()
    }

    // Param is passed by value, moved
    pub fn set_set(&mut self, v: ApbGetSetResp) {
        self.set = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_set(&mut self) -> &mut ApbGetSetResp {
        if self.set.is_none() {
            self.set.set_default();
        }
        self.set.as_mut().unwrap()
    }

    // Take field
    pub fn take_set(&mut self) -> ApbGetSetResp {
        self.set.take().unwrap_or_else(|| ApbGetSetResp::new())
    }

    pub fn get_set(&self) -> &ApbGetSetResp {
        self.set.as_ref().unwrap_or_else(|| ApbGetSetResp::default_instance())
    }

    // optional .AntidotePB.ApbGetRegResp reg = 3;

    pub fn clear_reg(&mut self) {
        self.reg.clear();
    }

    pub fn has_reg(&self) -> bool {
        self.reg.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reg(&mut self, v: ApbGetRegResp) {
        self.reg = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reg(&mut self) -> &mut ApbGetRegResp {
        if self.reg.is_none() {
            self.reg.set_default();
        }
        self.reg.as_mut().unwrap()
    }

    // Take field
    pub fn take_reg(&mut self) -> ApbGetRegResp {
        self.reg.take().unwrap_or_else(|| ApbGetRegResp::new())
    }

    pub fn get_reg(&self) -> &ApbGetRegResp {
        self.reg.as_ref().unwrap_or_else(|| ApbGetRegResp::default_instance())
    }

    // optional .AntidotePB.ApbGetMVRegResp mvreg = 4;

    pub fn clear_mvreg(&mut self) {
        self.mvreg.clear();
    }

    pub fn has_mvreg(&self) -> bool {
        self.mvreg.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mvreg(&mut self, v: ApbGetMVRegResp) {
        self.mvreg = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mvreg(&mut self) -> &mut ApbGetMVRegResp {
        if self.mvreg.is_none() {
            self.mvreg.set_default();
        }
        self.mvreg.as_mut().unwrap()
    }

    // Take field
    pub fn take_mvreg(&mut self) -> ApbGetMVRegResp {
        self.mvreg.take().unwrap_or_else(|| ApbGetMVRegResp::new())
    }

    pub fn get_mvreg(&self) -> &ApbGetMVRegResp {
        self.mvreg.as_ref().unwrap_or_else(|| ApbGetMVRegResp::default_instance())
    }

    // optional .AntidotePB.ApbGetMapResp map = 6;

    pub fn clear_map(&mut self) {
        self.map.clear();
    }

    pub fn has_map(&self) -> bool {
        self.map.is_some()
    }

    // Param is passed by value, moved
    pub fn set_map(&mut self, v: ApbGetMapResp) {
        self.map = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_map(&mut self) -> &mut ApbGetMapResp {
        if self.map.is_none() {
            self.map.set_default();
        }
        self.map.as_mut().unwrap()
    }

    // Take field
    pub fn take_map(&mut self) -> ApbGetMapResp {
        self.map.take().unwrap_or_else(|| ApbGetMapResp::new())
    }

    pub fn get_map(&self) -> &ApbGetMapResp {
        self.map.as_ref().unwrap_or_else(|| ApbGetMapResp::default_instance())
    }

    // optional .AntidotePB.ApbGetFlagResp flag = 7;

    pub fn clear_flag(&mut self) {
        self.flag.clear();
    }

    pub fn has_flag(&self) -> bool {
        self.flag.is_some()
    }

    // Param is passed by value, moved
    pub fn set_flag(&mut self, v: ApbGetFlagResp) {
        self.flag = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_flag(&mut self) -> &mut ApbGetFlagResp {
        if self.flag.is_none() {
            self.flag.set_default();
        }
        self.flag.as_mut().unwrap()
    }

    // Take field
    pub fn take_flag(&mut self) -> ApbGetFlagResp {
        self.flag.take().unwrap_or_else(|| ApbGetFlagResp::new())
    }

    pub fn get_flag(&self) -> &ApbGetFlagResp {
        self.flag.as_ref().unwrap_or_else(|| ApbGetFlagResp::default_instance())
    }
}

impl ::protobuf::Message for ApbReadObjectResp {
    fn is_initialized(&self) -> bool {
        for v in &self.counter {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.set {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.reg {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.mvreg {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.map {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.flag {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.counter)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.set)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.reg)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.mvreg)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.map)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.flag)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.counter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.set.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.reg.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.mvreg.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.map.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.flag.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.counter.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.set.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.reg.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.mvreg.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.map.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.flag.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbReadObjectResp {
        ApbReadObjectResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbGetCounterResp>>(
                    "counter",
                    |m: &ApbReadObjectResp| { &m.counter },
                    |m: &mut ApbReadObjectResp| { &mut m.counter },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbGetSetResp>>(
                    "set",
                    |m: &ApbReadObjectResp| { &m.set },
                    |m: &mut ApbReadObjectResp| { &mut m.set },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbGetRegResp>>(
                    "reg",
                    |m: &ApbReadObjectResp| { &m.reg },
                    |m: &mut ApbReadObjectResp| { &mut m.reg },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbGetMVRegResp>>(
                    "mvreg",
                    |m: &ApbReadObjectResp| { &m.mvreg },
                    |m: &mut ApbReadObjectResp| { &mut m.mvreg },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbGetMapResp>>(
                    "map",
                    |m: &ApbReadObjectResp| { &m.map },
                    |m: &mut ApbReadObjectResp| { &mut m.map },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbGetFlagResp>>(
                    "flag",
                    |m: &ApbReadObjectResp| { &m.flag },
                    |m: &mut ApbReadObjectResp| { &mut m.flag },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbReadObjectResp>(
                    "ApbReadObjectResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbReadObjectResp {
        static mut instance: ::protobuf::lazy::Lazy<ApbReadObjectResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbReadObjectResp,
        };
        unsafe {
            instance.get(ApbReadObjectResp::new)
        }
    }
}

impl ::protobuf::Clear for ApbReadObjectResp {
    fn clear(&mut self) {
        self.clear_counter();
        self.clear_set();
        self.clear_reg();
        self.clear_mvreg();
        self.clear_map();
        self.clear_flag();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbReadObjectResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbReadObjectResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbReadObjectsResp {
    // message fields
    success: ::std::option::Option<bool>,
    objects: ::protobuf::RepeatedField<ApbReadObjectResp>,
    errorcode: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbReadObjectsResp {
    pub fn new() -> ApbReadObjectsResp {
        ::std::default::Default::default()
    }

    // required bool success = 1;

    pub fn clear_success(&mut self) {
        self.success = ::std::option::Option::None;
    }

    pub fn has_success(&self) -> bool {
        self.success.is_some()
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = ::std::option::Option::Some(v);
    }

    pub fn get_success(&self) -> bool {
        self.success.unwrap_or(false)
    }

    // repeated .AntidotePB.ApbReadObjectResp objects = 2;

    pub fn clear_objects(&mut self) {
        self.objects.clear();
    }

    // Param is passed by value, moved
    pub fn set_objects(&mut self, v: ::protobuf::RepeatedField<ApbReadObjectResp>) {
        self.objects = v;
    }

    // Mutable pointer to the field.
    pub fn mut_objects(&mut self) -> &mut ::protobuf::RepeatedField<ApbReadObjectResp> {
        &mut self.objects
    }

    // Take field
    pub fn take_objects(&mut self) -> ::protobuf::RepeatedField<ApbReadObjectResp> {
        ::std::mem::replace(&mut self.objects, ::protobuf::RepeatedField::new())
    }

    pub fn get_objects(&self) -> &[ApbReadObjectResp] {
        &self.objects
    }

    // optional uint32 errorcode = 3;

    pub fn clear_errorcode(&mut self) {
        self.errorcode = ::std::option::Option::None;
    }

    pub fn has_errorcode(&self) -> bool {
        self.errorcode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_errorcode(&mut self, v: u32) {
        self.errorcode = ::std::option::Option::Some(v);
    }

    pub fn get_errorcode(&self) -> u32 {
        self.errorcode.unwrap_or(0)
    }
}

impl ::protobuf::Message for ApbReadObjectsResp {
    fn is_initialized(&self) -> bool {
        if self.success.is_none() {
            return false;
        }
        for v in &self.objects {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.objects)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.errorcode = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.success {
            my_size += 2;
        }
        for value in &self.objects {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.errorcode {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.success {
            os.write_bool(1, v)?;
        }
        for v in &self.objects {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.errorcode {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbReadObjectsResp {
        ApbReadObjectsResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "success",
                    |m: &ApbReadObjectsResp| { &m.success },
                    |m: &mut ApbReadObjectsResp| { &mut m.success },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbReadObjectResp>>(
                    "objects",
                    |m: &ApbReadObjectsResp| { &m.objects },
                    |m: &mut ApbReadObjectsResp| { &mut m.objects },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "errorcode",
                    |m: &ApbReadObjectsResp| { &m.errorcode },
                    |m: &mut ApbReadObjectsResp| { &mut m.errorcode },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbReadObjectsResp>(
                    "ApbReadObjectsResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbReadObjectsResp {
        static mut instance: ::protobuf::lazy::Lazy<ApbReadObjectsResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbReadObjectsResp,
        };
        unsafe {
            instance.get(ApbReadObjectsResp::new)
        }
    }
}

impl ::protobuf::Clear for ApbReadObjectsResp {
    fn clear(&mut self) {
        self.clear_success();
        self.clear_objects();
        self.clear_errorcode();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbReadObjectsResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbReadObjectsResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbCommitResp {
    // message fields
    success: ::std::option::Option<bool>,
    commit_time: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    errorcode: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbCommitResp {
    pub fn new() -> ApbCommitResp {
        ::std::default::Default::default()
    }

    // required bool success = 1;

    pub fn clear_success(&mut self) {
        self.success = ::std::option::Option::None;
    }

    pub fn has_success(&self) -> bool {
        self.success.is_some()
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = ::std::option::Option::Some(v);
    }

    pub fn get_success(&self) -> bool {
        self.success.unwrap_or(false)
    }

    // optional bytes commit_time = 2;

    pub fn clear_commit_time(&mut self) {
        self.commit_time.clear();
    }

    pub fn has_commit_time(&self) -> bool {
        self.commit_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_commit_time(&mut self, v: ::std::vec::Vec<u8>) {
        self.commit_time = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_commit_time(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.commit_time.is_none() {
            self.commit_time.set_default();
        }
        self.commit_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_commit_time(&mut self) -> ::std::vec::Vec<u8> {
        self.commit_time.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_commit_time(&self) -> &[u8] {
        match self.commit_time.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // optional uint32 errorcode = 3;

    pub fn clear_errorcode(&mut self) {
        self.errorcode = ::std::option::Option::None;
    }

    pub fn has_errorcode(&self) -> bool {
        self.errorcode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_errorcode(&mut self, v: u32) {
        self.errorcode = ::std::option::Option::Some(v);
    }

    pub fn get_errorcode(&self) -> u32 {
        self.errorcode.unwrap_or(0)
    }
}

impl ::protobuf::Message for ApbCommitResp {
    fn is_initialized(&self) -> bool {
        if self.success.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.commit_time)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.errorcode = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.success {
            my_size += 2;
        }
        if let Some(ref v) = self.commit_time.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.errorcode {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.success {
            os.write_bool(1, v)?;
        }
        if let Some(ref v) = self.commit_time.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(v) = self.errorcode {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbCommitResp {
        ApbCommitResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "success",
                    |m: &ApbCommitResp| { &m.success },
                    |m: &mut ApbCommitResp| { &mut m.success },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "commit_time",
                    |m: &ApbCommitResp| { &m.commit_time },
                    |m: &mut ApbCommitResp| { &mut m.commit_time },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "errorcode",
                    |m: &ApbCommitResp| { &m.errorcode },
                    |m: &mut ApbCommitResp| { &mut m.errorcode },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbCommitResp>(
                    "ApbCommitResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbCommitResp {
        static mut instance: ::protobuf::lazy::Lazy<ApbCommitResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbCommitResp,
        };
        unsafe {
            instance.get(ApbCommitResp::new)
        }
    }
}

impl ::protobuf::Clear for ApbCommitResp {
    fn clear(&mut self) {
        self.clear_success();
        self.clear_commit_time();
        self.clear_errorcode();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbCommitResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbCommitResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApbStaticReadObjectsResp {
    // message fields
    objects: ::protobuf::SingularPtrField<ApbReadObjectsResp>,
    committime: ::protobuf::SingularPtrField<ApbCommitResp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ApbStaticReadObjectsResp {
    pub fn new() -> ApbStaticReadObjectsResp {
        ::std::default::Default::default()
    }

    // required .AntidotePB.ApbReadObjectsResp objects = 1;

    pub fn clear_objects(&mut self) {
        self.objects.clear();
    }

    pub fn has_objects(&self) -> bool {
        self.objects.is_some()
    }

    // Param is passed by value, moved
    pub fn set_objects(&mut self, v: ApbReadObjectsResp) {
        self.objects = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_objects(&mut self) -> &mut ApbReadObjectsResp {
        if self.objects.is_none() {
            self.objects.set_default();
        }
        self.objects.as_mut().unwrap()
    }

    // Take field
    pub fn take_objects(&mut self) -> ApbReadObjectsResp {
        self.objects.take().unwrap_or_else(|| ApbReadObjectsResp::new())
    }

    pub fn get_objects(&self) -> &ApbReadObjectsResp {
        self.objects.as_ref().unwrap_or_else(|| ApbReadObjectsResp::default_instance())
    }

    // required .AntidotePB.ApbCommitResp committime = 2;

    pub fn clear_committime(&mut self) {
        self.committime.clear();
    }

    pub fn has_committime(&self) -> bool {
        self.committime.is_some()
    }

    // Param is passed by value, moved
    pub fn set_committime(&mut self, v: ApbCommitResp) {
        self.committime = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_committime(&mut self) -> &mut ApbCommitResp {
        if self.committime.is_none() {
            self.committime.set_default();
        }
        self.committime.as_mut().unwrap()
    }

    // Take field
    pub fn take_committime(&mut self) -> ApbCommitResp {
        self.committime.take().unwrap_or_else(|| ApbCommitResp::new())
    }

    pub fn get_committime(&self) -> &ApbCommitResp {
        self.committime.as_ref().unwrap_or_else(|| ApbCommitResp::default_instance())
    }
}

impl ::protobuf::Message for ApbStaticReadObjectsResp {
    fn is_initialized(&self) -> bool {
        if self.objects.is_none() {
            return false;
        }
        if self.committime.is_none() {
            return false;
        }
        for v in &self.objects {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.committime {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.objects)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.committime)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.objects.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.committime.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.objects.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.committime.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApbStaticReadObjectsResp {
        ApbStaticReadObjectsResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbReadObjectsResp>>(
                    "objects",
                    |m: &ApbStaticReadObjectsResp| { &m.objects },
                    |m: &mut ApbStaticReadObjectsResp| { &mut m.objects },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApbCommitResp>>(
                    "committime",
                    |m: &ApbStaticReadObjectsResp| { &m.committime },
                    |m: &mut ApbStaticReadObjectsResp| { &mut m.committime },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApbStaticReadObjectsResp>(
                    "ApbStaticReadObjectsResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApbStaticReadObjectsResp {
        static mut instance: ::protobuf::lazy::Lazy<ApbStaticReadObjectsResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApbStaticReadObjectsResp,
        };
        unsafe {
            instance.get(ApbStaticReadObjectsResp::new)
        }
    }
}

impl ::protobuf::Clear for ApbStaticReadObjectsResp {
    fn clear(&mut self) {
        self.clear_objects();
        self.clear_committime();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApbStaticReadObjectsResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApbStaticReadObjectsResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum MessageCode {
    apbErrorResp = 0,
    apbRegUpdate = 107,
    apbGetRegResp = 108,
    apbCounterUpdate = 109,
    apbGetCounterResp = 110,
    apbOperationResp = 111,
    apbSetUpdate = 112,
    apbGetSetResp = 113,
    apbTxnProperties = 114,
    apbBoundObject = 115,
    apbReadObjects = 116,
    apbUpdateOp = 117,
    apbUpdateObjects = 118,
    apbStartTransaction = 119,
    apbAbortTransaction = 120,
    apbCommitTransaction = 121,
    apbStaticUpdateObjects = 122,
    apbStaticReadObjects = 123,
    apbStartTransactionResp = 124,
    apbReadObjectResp = 125,
    apbReadObjectsResp = 126,
    apbCommitResp = 127,
    apbStaticReadObjectsResp = 128,
}

impl ::protobuf::ProtobufEnum for MessageCode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MessageCode> {
        match value {
            0 => ::std::option::Option::Some(MessageCode::apbErrorResp),
            107 => ::std::option::Option::Some(MessageCode::apbRegUpdate),
            108 => ::std::option::Option::Some(MessageCode::apbGetRegResp),
            109 => ::std::option::Option::Some(MessageCode::apbCounterUpdate),
            110 => ::std::option::Option::Some(MessageCode::apbGetCounterResp),
            111 => ::std::option::Option::Some(MessageCode::apbOperationResp),
            112 => ::std::option::Option::Some(MessageCode::apbSetUpdate),
            113 => ::std::option::Option::Some(MessageCode::apbGetSetResp),
            114 => ::std::option::Option::Some(MessageCode::apbTxnProperties),
            115 => ::std::option::Option::Some(MessageCode::apbBoundObject),
            116 => ::std::option::Option::Some(MessageCode::apbReadObjects),
            117 => ::std::option::Option::Some(MessageCode::apbUpdateOp),
            118 => ::std::option::Option::Some(MessageCode::apbUpdateObjects),
            119 => ::std::option::Option::Some(MessageCode::apbStartTransaction),
            120 => ::std::option::Option::Some(MessageCode::apbAbortTransaction),
            121 => ::std::option::Option::Some(MessageCode::apbCommitTransaction),
            122 => ::std::option::Option::Some(MessageCode::apbStaticUpdateObjects),
            123 => ::std::option::Option::Some(MessageCode::apbStaticReadObjects),
            124 => ::std::option::Option::Some(MessageCode::apbStartTransactionResp),
            125 => ::std::option::Option::Some(MessageCode::apbReadObjectResp),
            126 => ::std::option::Option::Some(MessageCode::apbReadObjectsResp),
            127 => ::std::option::Option::Some(MessageCode::apbCommitResp),
            128 => ::std::option::Option::Some(MessageCode::apbStaticReadObjectsResp),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MessageCode] = &[
            MessageCode::apbErrorResp,
            MessageCode::apbRegUpdate,
            MessageCode::apbGetRegResp,
            MessageCode::apbCounterUpdate,
            MessageCode::apbGetCounterResp,
            MessageCode::apbOperationResp,
            MessageCode::apbSetUpdate,
            MessageCode::apbGetSetResp,
            MessageCode::apbTxnProperties,
            MessageCode::apbBoundObject,
            MessageCode::apbReadObjects,
            MessageCode::apbUpdateOp,
            MessageCode::apbUpdateObjects,
            MessageCode::apbStartTransaction,
            MessageCode::apbAbortTransaction,
            MessageCode::apbCommitTransaction,
            MessageCode::apbStaticUpdateObjects,
            MessageCode::apbStaticReadObjects,
            MessageCode::apbStartTransactionResp,
            MessageCode::apbReadObjectResp,
            MessageCode::apbReadObjectsResp,
            MessageCode::apbCommitResp,
            MessageCode::apbStaticReadObjectsResp,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("MessageCode", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for MessageCode {
}

impl ::protobuf::reflect::ProtobufValue for MessageCode {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CRDT_type {
    COUNTER = 3,
    ORSET = 4,
    LWWREG = 5,
    MVREG = 6,
    GMAP = 8,
    RWSET = 10,
    RRMAP = 11,
    FATCOUNTER = 12,
    FLAG_EW = 13,
    FLAG_DW = 14,
}

impl ::protobuf::ProtobufEnum for CRDT_type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CRDT_type> {
        match value {
            3 => ::std::option::Option::Some(CRDT_type::COUNTER),
            4 => ::std::option::Option::Some(CRDT_type::ORSET),
            5 => ::std::option::Option::Some(CRDT_type::LWWREG),
            6 => ::std::option::Option::Some(CRDT_type::MVREG),
            8 => ::std::option::Option::Some(CRDT_type::GMAP),
            10 => ::std::option::Option::Some(CRDT_type::RWSET),
            11 => ::std::option::Option::Some(CRDT_type::RRMAP),
            12 => ::std::option::Option::Some(CRDT_type::FATCOUNTER),
            13 => ::std::option::Option::Some(CRDT_type::FLAG_EW),
            14 => ::std::option::Option::Some(CRDT_type::FLAG_DW),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CRDT_type] = &[
            CRDT_type::COUNTER,
            CRDT_type::ORSET,
            CRDT_type::LWWREG,
            CRDT_type::MVREG,
            CRDT_type::GMAP,
            CRDT_type::RWSET,
            CRDT_type::RRMAP,
            CRDT_type::FATCOUNTER,
            CRDT_type::FLAG_EW,
            CRDT_type::FLAG_DW,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("CRDT_type", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for CRDT_type {
}

impl ::protobuf::reflect::ProtobufValue for CRDT_type {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eantidote.proto\x12\nAntidotePB\"7\n\x0cApbErrorResp\x12\x12\n\x06e\
    rrmsg\x18\x01\x20\x02(\x0cB\x02\x18\0\x12\x13\n\x07errcode\x18\x02\x20\
    \x02(\rB\x02\x18\0\"#\n\x10ApbCounterUpdate\x12\x0f\n\x03inc\x18\x01\x20\
    \x01(\x12B\x02\x18\0\"&\n\x11ApbGetCounterResp\x12\x11\n\x05value\x18\
    \x01\x20\x02(\x11B\x02\x18\0\"\x90\x01\n\x0cApbSetUpdate\x126\n\x06optyp\
    e\x18\x01\x20\x02(\x0e2\".AntidotePB.ApbSetUpdate.SetOpTypeB\x02\x18\0\
    \x12\x10\n\x04adds\x18\x02\x20\x03(\x0cB\x02\x18\0\x12\x10\n\x04rems\x18\
    \x03\x20\x03(\x0cB\x02\x18\0\"$\n\tSetOpType\x12\x07\n\x03ADD\x10\x01\
    \x12\n\n\x06REMOVE\x10\x02\x1a\x02\x10\0\"\"\n\rApbGetSetResp\x12\x11\n\
    \x05value\x18\x01\x20\x03(\x0cB\x02\x18\0\"!\n\x0cApbRegUpdate\x12\x11\n\
    \x05value\x18\x01\x20\x02(\x0cB\x02\x18\0\"\"\n\rApbGetRegResp\x12\x11\n\
    \x05value\x18\x01\x20\x02(\x0cB\x02\x18\0\"%\n\x0fApbGetMVRegResp\x12\
    \x12\n\x06values\x18\x01\x20\x03(\x0cB\x02\x18\0\"E\n\tApbMapKey\x12\x0f\
    \n\x03key\x18\x01\x20\x02(\x0cB\x02\x18\0\x12'\n\x04type\x18\x02\x20\x02\
    (\x0e2\x15.AntidotePB.CRDT_typeB\x02\x18\0\"s\n\x0cApbMapUpdate\x123\n\
    \x07updates\x18\x01\x20\x03(\x0b2\x1e.AntidotePB.ApbMapNestedUpdateB\x02\
    \x18\0\x12.\n\x0bremovedKeys\x18\x02\x20\x03(\x0b2\x15.AntidotePB.ApbMap\
    KeyB\x02\x18\0\"p\n\x12ApbMapNestedUpdate\x12&\n\x03key\x18\x01\x20\x02(\
    \x0b2\x15.AntidotePB.ApbMapKeyB\x02\x18\0\x122\n\x06update\x18\x02\x20\
    \x02(\x0b2\x1e.AntidotePB.ApbUpdateOperationB\x02\x18\0\"=\n\rApbGetMapR\
    esp\x12,\n\x07entries\x18\x01\x20\x03(\x0b2\x17.AntidotePB.ApbMapEntryB\
    \x02\x18\0\"g\n\x0bApbMapEntry\x12&\n\x03key\x18\x01\x20\x02(\x0b2\x15.A\
    ntidotePB.ApbMapKeyB\x02\x18\0\x120\n\x05value\x18\x02\x20\x02(\x0b2\x1d\
    .AntidotePB.ApbReadObjectRespB\x02\x18\0\"\"\n\rApbFlagUpdate\x12\x11\n\
    \x05value\x18\x01\x20\x02(\x08B\x02\x18\0\"#\n\x0eApbGetFlagResp\x12\x11\
    \n\x05value\x18\x01\x20\x02(\x08B\x02\x18\0\"\x0e\n\x0cApbCrdtReset\">\n\
    \x10ApbOperationResp\x12\x13\n\x07success\x18\x01\x20\x02(\x08B\x02\x18\
    \0\x12\x15\n\terrorcode\x18\x02\x20\x01(\rB\x02\x18\0\"@\n\x10ApbTxnProp\
    erties\x12\x16\n\nread_write\x18\x01\x20\x01(\rB\x02\x18\0\x12\x14\n\x08\
    red_blue\x18\x02\x20\x01(\rB\x02\x18\0\"^\n\x0eApbBoundObject\x12\x0f\n\
    \x03key\x18\x01\x20\x02(\x0cB\x02\x18\0\x12'\n\x04type\x18\x02\x20\x02(\
    \x0e2\x15.AntidotePB.CRDT_typeB\x02\x18\0\x12\x12\n\x06bucket\x18\x03\
    \x20\x02(\x0cB\x02\x18\0\"j\n\x0eApbReadObjects\x124\n\x0cboundobjects\
    \x18\x01\x20\x03(\x0b2\x1a.AntidotePB.ApbBoundObjectB\x02\x18\0\x12\"\n\
    \x16transaction_descriptor\x18\x02\x20\x02(\x0cB\x02\x18\0\"y\n\x0bApbUp\
    dateOp\x123\n\x0bboundobject\x18\x01\x20\x02(\x0b2\x1a.AntidotePB.ApbBou\
    ndObjectB\x02\x18\0\x125\n\toperation\x18\x02\x20\x02(\x0b2\x1e.Antidote\
    PB.ApbUpdateOperationB\x02\x18\0\"\xae\x02\n\x12ApbUpdateOperation\x123\
    \n\tcounterop\x18\x01\x20\x01(\x0b2\x1c.AntidotePB.ApbCounterUpdateB\x02\
    \x18\0\x12+\n\x05setop\x18\x02\x20\x01(\x0b2\x18.AntidotePB.ApbSetUpdate\
    B\x02\x18\0\x12+\n\x05regop\x18\x03\x20\x01(\x0b2\x18.AntidotePB.ApbRegU\
    pdateB\x02\x18\0\x12+\n\x05mapop\x18\x05\x20\x01(\x0b2\x18.AntidotePB.Ap\
    bMapUpdateB\x02\x18\0\x12-\n\x07resetop\x18\x06\x20\x01(\x0b2\x18.Antido\
    tePB.ApbCrdtResetB\x02\x18\0\x12-\n\x06flagop\x18\x07\x20\x01(\x0b2\x19.\
    AntidotePB.ApbFlagUpdateB\x02\x18\0\"d\n\x10ApbUpdateObjects\x12,\n\x07u\
    pdates\x18\x01\x20\x03(\x0b2\x17.AntidotePB.ApbUpdateOpB\x02\x18\0\x12\"\
    \n\x16transaction_descriptor\x18\x02\x20\x02(\x0cB\x02\x18\0\"b\n\x13Apb\
    StartTransaction\x12\x15\n\ttimestamp\x18\x01\x20\x01(\x0cB\x02\x18\0\
    \x124\n\nproperties\x18\x02\x20\x01(\x0b2\x1c.AntidotePB.ApbTxnPropertie\
    sB\x02\x18\0\"9\n\x13ApbAbortTransaction\x12\"\n\x16transaction_descript\
    or\x18\x01\x20\x02(\x0cB\x02\x18\0\":\n\x14ApbCommitTransaction\x12\"\n\
    \x16transaction_descriptor\x18\x01\x20\x02(\x0cB\x02\x18\0\"\x80\x01\n\
    \x16ApbStaticUpdateObjects\x128\n\x0btransaction\x18\x01\x20\x02(\x0b2\
    \x1f.AntidotePB.ApbStartTransactionB\x02\x18\0\x12,\n\x07updates\x18\x02\
    \x20\x03(\x0b2\x17.AntidotePB.ApbUpdateOpB\x02\x18\0\"\x81\x01\n\x14ApbS\
    taticReadObjects\x128\n\x0btransaction\x18\x01\x20\x02(\x0b2\x1f.Antidot\
    ePB.ApbStartTransactionB\x02\x18\0\x12/\n\x07objects\x18\x02\x20\x03(\
    \x0b2\x1a.AntidotePB.ApbBoundObjectB\x02\x18\0\"i\n\x17ApbStartTransacti\
    onResp\x12\x13\n\x07success\x18\x01\x20\x02(\x08B\x02\x18\0\x12\"\n\x16t\
    ransaction_descriptor\x18\x02\x20\x01(\x0cB\x02\x18\0\x12\x15\n\terrorco\
    de\x18\x03\x20\x01(\rB\x02\x18\0\"\xa9\x02\n\x11ApbReadObjectResp\x122\n\
    \x07counter\x18\x01\x20\x01(\x0b2\x1d.AntidotePB.ApbGetCounterRespB\x02\
    \x18\0\x12*\n\x03set\x18\x02\x20\x01(\x0b2\x19.AntidotePB.ApbGetSetRespB\
    \x02\x18\0\x12*\n\x03reg\x18\x03\x20\x01(\x0b2\x19.AntidotePB.ApbGetRegR\
    espB\x02\x18\0\x12.\n\x05mvreg\x18\x04\x20\x01(\x0b2\x1b.AntidotePB.ApbG\
    etMVRegRespB\x02\x18\0\x12*\n\x03map\x18\x06\x20\x01(\x0b2\x19.AntidoteP\
    B.ApbGetMapRespB\x02\x18\0\x12,\n\x04flag\x18\x07\x20\x01(\x0b2\x1a.Anti\
    dotePB.ApbGetFlagRespB\x02\x18\0\"t\n\x12ApbReadObjectsResp\x12\x13\n\
    \x07success\x18\x01\x20\x02(\x08B\x02\x18\0\x122\n\x07objects\x18\x02\
    \x20\x03(\x0b2\x1d.AntidotePB.ApbReadObjectRespB\x02\x18\0\x12\x15\n\ter\
    rorcode\x18\x03\x20\x01(\rB\x02\x18\0\"T\n\rApbCommitResp\x12\x13\n\x07s\
    uccess\x18\x01\x20\x02(\x08B\x02\x18\0\x12\x17\n\x0bcommit_time\x18\x02\
    \x20\x01(\x0cB\x02\x18\0\x12\x15\n\terrorcode\x18\x03\x20\x01(\rB\x02\
    \x18\0\"\x82\x01\n\x18ApbStaticReadObjectsResp\x123\n\x07objects\x18\x01\
    \x20\x02(\x0b2\x1e.AntidotePB.ApbReadObjectsRespB\x02\x18\0\x121\n\ncomm\
    ittime\x18\x02\x20\x02(\x0b2\x19.AntidotePB.ApbCommitRespB\x02\x18\0*\
    \x95\x04\n\x0bMessageCode\x12\x10\n\x0capbErrorResp\x10\0\x12\x10\n\x0ca\
    pbRegUpdate\x10k\x12\x11\n\rapbGetRegResp\x10l\x12\x14\n\x10apbCounterUp\
    date\x10m\x12\x15\n\x11apbGetCounterResp\x10n\x12\x14\n\x10apbOperationR\
    esp\x10o\x12\x10\n\x0capbSetUpdate\x10p\x12\x11\n\rapbGetSetResp\x10q\
    \x12\x14\n\x10apbTxnProperties\x10r\x12\x12\n\x0eapbBoundObject\x10s\x12\
    \x12\n\x0eapbReadObjects\x10t\x12\x0f\n\x0bapbUpdateOp\x10u\x12\x14\n\
    \x10apbUpdateObjects\x10v\x12\x17\n\x13apbStartTransaction\x10w\x12\x17\
    \n\x13apbAbortTransaction\x10x\x12\x18\n\x14apbCommitTransaction\x10y\
    \x12\x1a\n\x16apbStaticUpdateObjects\x10z\x12\x18\n\x14apbStaticReadObje\
    cts\x10{\x12\x1b\n\x17apbStartTransactionResp\x10|\x12\x15\n\x11apbReadO\
    bjectResp\x10}\x12\x16\n\x12apbReadObjectsResp\x10~\x12\x11\n\rapbCommit\
    Resp\x10\x7f\x12\x1d\n\x18apbStaticReadObjectsResp\x10\x80\x01\x1a\x02\
    \x10\0*\x88\x01\n\tCRDT_type\x12\x0b\n\x07COUNTER\x10\x03\x12\t\n\x05ORS\
    ET\x10\x04\x12\n\n\x06LWWREG\x10\x05\x12\t\n\x05MVREG\x10\x06\x12\x08\n\
    \x04GMAP\x10\x08\x12\t\n\x05RWSET\x10\n\x12\t\n\x05RRMAP\x10\x0b\x12\x0e\
    \n\nFATCOUNTER\x10\x0c\x12\x0b\n\x07FLAG_EW\x10\r\x12\x0b\n\x07FLAG_DW\
    \x10\x0e\x1a\x02\x10\0B\0b\x06proto2\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
